<?php

namespace Tests\Feature;

use App\Thread;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ThreadTest extends TestCase
{
    use DatabaseMigrations;
    protected $thread;
    public function  setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = factory(Thread::class)->create();
    }

    /** @test */
    public function a_user_can_browse_all_threads()
    {
        $response = $this->get('/threads');

        $response->assertSee($this->thread->title);
        $response = $this->get($this->thread->path());
        $response->assertSee($this->thread->title);
    }
    /** @test */
    public function a_user_can_read_threads() {
        $reply = factory('App\Reply')->create(['thread_id' => $this->thread->id]);
        $this->get($this->thread->path())
        ->assertSee($reply->body);
    }
    /** @test */
    public function a_user_can_filter_by_popularity() {
        $threadWithNo = create('App\Thread');
        create('App\Reply',['thread_id' => $this->thread->id], 2);
        $threadWithThree = create('App\Thread');
        create('App\Reply',['thread_id' => $threadWithThree->id], 3);
        $response = $this->getJson('threads?popular=1')->json();
        $this->assertEquals([3, 2, 0],array_column($response,'replies_count'));
    }
}
